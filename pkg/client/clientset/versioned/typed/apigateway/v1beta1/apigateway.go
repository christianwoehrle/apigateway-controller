// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/christianwoehrle/apigateway-controller/pkg/apis/apigateway/v1beta1"
	scheme "github.com/christianwoehrle/apigateway-controller/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ApiGatewaysGetter has a method to return a ApiGatewayInterface.
// A group's client should implement this interface.
type ApiGatewaysGetter interface {
	ApiGateways(namespace string) ApiGatewayInterface
}

// ApiGatewayInterface has methods to work with ApiGateway resources.
type ApiGatewayInterface interface {
	Create(*v1beta1.ApiGateway) (*v1beta1.ApiGateway, error)
	Update(*v1beta1.ApiGateway) (*v1beta1.ApiGateway, error)
	UpdateStatus(*v1beta1.ApiGateway) (*v1beta1.ApiGateway, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1beta1.ApiGateway, error)
	List(opts v1.ListOptions) (*v1beta1.ApiGatewayList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.ApiGateway, err error)
	ApiGatewayExpansion
}

// apiGateways implements ApiGatewayInterface
type apiGateways struct {
	client rest.Interface
	ns     string
}

// newApiGateways returns a ApiGateways
func newApiGateways(c *ApigatewayV1beta1Client, namespace string) *apiGateways {
	return &apiGateways{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the apiGateway, and returns the corresponding apiGateway object, and an error if there is any.
func (c *apiGateways) Get(name string, options v1.GetOptions) (result *v1beta1.ApiGateway, err error) {
	result = &v1beta1.ApiGateway{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("apigateways").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ApiGateways that match those selectors.
func (c *apiGateways) List(opts v1.ListOptions) (result *v1beta1.ApiGatewayList, err error) {
	result = &v1beta1.ApiGatewayList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("apigateways").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested apiGateways.
func (c *apiGateways) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("apigateways").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a apiGateway and creates it.  Returns the server's representation of the apiGateway, and an error, if there is any.
func (c *apiGateways) Create(apiGateway *v1beta1.ApiGateway) (result *v1beta1.ApiGateway, err error) {
	result = &v1beta1.ApiGateway{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("apigateways").
		Body(apiGateway).
		Do().
		Into(result)
	return
}

// Update takes the representation of a apiGateway and updates it. Returns the server's representation of the apiGateway, and an error, if there is any.
func (c *apiGateways) Update(apiGateway *v1beta1.ApiGateway) (result *v1beta1.ApiGateway, err error) {
	result = &v1beta1.ApiGateway{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("apigateways").
		Name(apiGateway.Name).
		Body(apiGateway).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *apiGateways) UpdateStatus(apiGateway *v1beta1.ApiGateway) (result *v1beta1.ApiGateway, err error) {
	result = &v1beta1.ApiGateway{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("apigateways").
		Name(apiGateway.Name).
		SubResource("status").
		Body(apiGateway).
		Do().
		Into(result)
	return
}

// Delete takes name of the apiGateway and deletes it. Returns an error if one occurs.
func (c *apiGateways) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("apigateways").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *apiGateways) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("apigateways").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched apiGateway.
func (c *apiGateways) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.ApiGateway, err error) {
	result = &v1beta1.ApiGateway{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("apigateways").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
